#!/Users/cche/anaconda3/envs/yt-dev/bin/python
# note: requires yt>=4.3.0

import os
import sys
import argparse
from math import sqrt
import glob
import numpy as np
import yt
import unyt
from multiprocessing import Pool, cpu_count
import pprint

yt.set_log_level(40)

CLOUDY_H_MASS_FRACTION = 1.0 / (1.0 + 0.1 * 3.971)
m_u = 1.660539e-24 * unyt.g


def plot_one(pltdir, outdir, field, kind, width, zlim, particle=[], grids=False, cell_edges=False, time_off=False, view_dir="z", center=None, top_left_text=None, use_ISM_mean_molecular_weight=False):

    print(f"processing {pltdir}")

    # get index number of pltdir
    idx = int(os.path.basename(pltdir)[-5:])

    ds = yt.load(pltdir)
    ad = ds.all_data()
    # print(ds.derived_field_list)
    # return

    mean_molecular_weight_per_H_atom = m_u
    if use_ISM_mean_molecular_weight:
        mean_molecular_weight_per_H_atom = m_u / CLOUDY_H_MASS_FRACTION

    # add derived fields
    if field == ("gas", "n_H"):
        # be sure to use a name that does not conflict with existing fields. Do not use ("gas", "number_density")!!!
        ds.add_field(field, function=lambda field, data: data[("gas", "density")] / mean_molecular_weight_per_H_atom, units="cm**-3", sampling_type="cell")
    elif field == ("gas", "temperature"):
        # add derived field
        k_B = unyt.physical_constants.boltzmann_constant
        mu = unyt.physical_constants.proton_mass
        gamma = 5.0 / 3.0
        ds.add_field(field, function=lambda field, data: data[("gas", "internal_energy_density")] * (gamma - 1.0) / (data[('gas', 'density')] / mu * k_B), units="K", sampling_type="cell")
    elif field == ("gas", "velocity"):
        # add derived field for velocity magnitude
        ds.add_field(field, function=lambda field, data: np.sqrt(data[("gas", "velocity_x")]**2 + data[("gas", "velocity_y")]**2 + data[("gas", "velocity_z")]**2), units="cm/s", sampling_type="cell")
    elif field == ("gas", "momentum_density"):
        # add derived field for momentum density
        ds.add_field(field, function=lambda field, data: np.sqrt(data[("gas", "momentum_density_x")]**2 + data[("gas", "momentum_density_y")]**2 + data[("gas", "momentum_density_z")]**2), sampling_type="cell")

    # plot slice or projection
    field_rho = ("gas", "density")
    if kind in ["slc", "slice"]:
        slc = yt.SlicePlot(ds, view_dir, field, center=center)
    elif kind in ["prj", "proj", "projection"]:
        slc = yt.ProjectionPlot(ds, view_dir, field, weight_field=field_rho, center=center)
    else:
        raise ValueError(f"kind {kind} not supported")

    cmap = "viridis"
    if field == ("gas", "temperature"):
        cmap = "hot"
    slc.set_cmap(field, cmap)

    # slc.set_log(field, True)
    slc.set_background_color(field, 'black')
    if width is not None:
        # if ',' or '_' is in width, then it is a tuple (float, unit)
        if ',' in width:
            w = (float(width.split(',')[0]), width.split(',')[1])
        elif '_' in width:
            w = (float(width.split('_')[0]), width.split('_')[1])
        else:
            w = float(width)
        slc.set_width(w)
    if zlim is not None:
        zlim0 = 'min' if zlim[0].lower() == "min" else float(zlim[0])
        zlim1 = 'max' if zlim[1].lower() == "max" else float(zlim[1])
        # special case for idx == 0, usually has uniform density
        if idx == 0 and zlim1 == 'max':
            # find the max density
            if zlim0 == 'min':
                den_min = ad.min(field)
                den_max = ad.max(field)
                if np.isclose(den_min, den_max):
                    zlim0 = 0.9 * den_min
                    zlim1 = 1.1 * den_max
            else:
                zlim1 = 1.1 * zlim0
        slc.set_zlim(field, zlim0, zlim1)
    if len(particle) > 0:
        # check if particles exist
        if 'particles' in ds.parameters.keys():
            # print(ds['particle_info']['CIC_particles']['num_particles'])
            colors = ['red', 'magenta', 'cyan', 'yellow', 'lime', 'hotpink', 'orange', 'deepskyblue']
            if field == ("gas", "temperature"):
                colors = ['green', 'lime', 'cyan', 'hotpink', 'orange', 'deepskyblue']
            # get domain width
            Lx = ds.domain_right_edge[0] - ds.domain_left_edge[0]
            for i, par in enumerate(particle):
                if par not in ds['particle_info'].keys():
                    print("particle ", par, " not found in ", pltdir)
                    continue
                num_particles = ds['particle_info'][par]['num_particles']
                if num_particles == 0:
                    print(f"no {par} particles to annotate in {pltdir}")
                    continue

                # get particle position
                pos = ad[(par, "particle_position_x")]
                if len(pos) > 0:
                    # slc.annotate_particles(Lx, p_size=160., col=colors[i], marker='*', ptype=par)
                    # annotate particles at a depth of 0.1 * boxsize
                    slc.annotate_particles(Lx * 0.1, p_size=160., col=colors[i], marker='*', ptype=par)
                else:
                    print("no particles to annotate in ", pltdir)
                    print("pos =", pos)
        else:
            print(f"no particles in ds.parameters, {pltdir}")
            # print(ad.keys())
            print(ds.parameters)
    if grids:
        slc.annotate_grids(edgecolors='white', linewidth=1)
    if cell_edges:
        slc.annotate_cell_edges(line_width=0.001, color='black')
    if not time_off:
        slc.annotate_timestamp()
    if top_left_text is not None:
        # Add text annotation at the top-left corner with LaTeX support
        slc.annotate_text((0.02, 0.98), top_left_text, coord_system='axis', text_args={'color': 'white', 'usetex': True, 'verticalalignment': 'top', 'horizontalalignment': 'left'})
    # get cwd
    cwd = os.getcwd()
    # change to outdir
    os.chdir(outdir)
    slc.set_figure_size(4)  # slightly smaller figure size
    fn = slc.save(mpl_kwargs={"dpi": 300, "bbox_inches": "tight", "pad_inches": 0.1})
    print(f"{fn} saved")
    # change back to cwd
    os.chdir(cwd)


def plot_slice_or_projection(pltdirs, outdir, field, kind, width, zlim, particle=[], grids=False, cell_edges=False, time_off=False, skip_existing=False, view_dir="z", center=None, n_processes=1, print_field_list=False, first_only=False, top_left_text=None, use_ISM_mean_molecular_weight=False):

    if print_field_list:
        ds = yt.load(pltdirs[0])
        print("ds.derived_field_list:")
        pprint.pprint(ds.derived_field_list)
        return

    assert view_dir in ["x", "y", "z"]

    if outdir != ".":
        if os.path.exists(outdir):
            if skip_existing:
                print(f"skipping {outdir} because it exists")
                return
        else:
            os.makedirs(outdir, exist_ok=True)

    if field is None or field in ["density", "rho", "den"]:
        field = ("gas", "density")
    elif field in ["n", "nH", "n_H", "num_density"]:
        field = ("gas", "n_H")
    elif field in ["temperature", "T", "temp"]:
        field = ("gas", "temperature")
    elif field in ['vx', 'velocity-x', 'velocity_x']:
        field = ("gas", "velocity_x")
    elif field in ['vy', 'velocity-y', 'velocity_y']:
        field = ("gas", "velocity_y")
    elif field in ['vz', 'velocity-z', 'velocity_z']:
        field = ("gas", "velocity_z")
    elif field in ['v', 'velocity']:
        field = ("gas", "velocity")
    elif field in ['p', 'momentum']:
        field = ("gas", "momentum_density")
    else:
        raise ValueError(f"field {field} not supported")

    # Filter out invalid directories and old directories
    valid_pltdirs = [
        pltdir for pltdir in pltdirs if os.path.isdir(pltdir) and ".old." not in os.path.basename(pltdir)
    ]

    # parse center
    if center is not None:
        if ',' in center:
            center = tuple(float(x) for x in center.split(','))
        elif '_' in center:
            center = tuple(float(x) for x in center.split('_'))
        else:
            center = float(center)
    else:
        center = 'c'

    if n_processes == 1 or first_only:
        if first_only:
            valid_pltdirs = [valid_pltdirs[0]]
        for pltdir in valid_pltdirs:
            plot_one(pltdir, outdir, field, kind, width, zlim, particle, grids, cell_edges, time_off, view_dir, center, top_left_text, use_ISM_mean_molecular_weight)
    else:
        # Create arguments for parallel processing
        plot_args = [
            (pltdir, outdir, field, kind, width, zlim, particle, grids, cell_edges, time_off, view_dir, center, top_left_text, use_ISM_mean_molecular_weight)
            for pltdir in valid_pltdirs
        ]

        print(f"Processing {len(valid_pltdirs)} directories using {n_processes} processes")

        # Process directories in parallel
        with Pool(processes=n_processes) as pool:
            pool.starmap(plot_one, plot_args)


def parse_args():
    parser = argparse.ArgumentParser()
    # plotfile directories, require at least one
    parser.add_argument("pltdirs", type=str, nargs="+")
    # task
    parser.add_argument("--task", type=str, default="slc")
    # pick field to plot
    parser.add_argument("-f", "--field", type=str, default="density")
    # kind of plot: slc or proj
    parser.add_argument("--kind", type=str, default="slc")
    # width, optional
    parser.add_argument("-w", "--width", type=str, default=None, help="width of the plot, e.g. 1 or 10_kpc")
    # output directory
    parser.add_argument("-o", "--outdir", type=str, default=".")
    # zlim
    parser.add_argument("--zlim", type=str, nargs=2, default=None)
    # view direction
    parser.add_argument("--dir", type=str, default="z", help="view direction: x, y, or z")
    # center at direction
    parser.add_argument("--center", type=str, default=None, help="center at direction: x, y, or z. Default is the domain center.")
    # particle type to annotate
    parser.add_argument("--particles", type=str, nargs="+", default=[])
    # toggle annotate grid lines
    parser.add_argument("--grids", action="store_true")
    # toggle annotate cell edges
    parser.add_argument("--cell_edges", action="store_true")
    # toggle annotate timestamp
    parser.add_argument("--timeoff", action="store_true")
    # skip existing folder
    parser.add_argument("--skip_existing", action="store_true")
    # number of processes to use
    parser.add_argument("-j", "--n_processes", type=int, default=1)
    # print field list
    parser.add_argument("--print_field_list", action="store_true")
    # plot the first one only
    parser.add_argument("--first_only", action="store_true")
    # text to annotate at top-left corner
    parser.add_argument("--top_left_text", type=str, default=None, help="Text to annotate at the top-left corner in white")
    # use ISM mean molecular weight
    parser.add_argument("--use_ISM", action="store_true")

    return parser.parse_args()


def main(args):

    plot_slice_or_projection(args.pltdirs, args.outdir, args.field, args.kind, args.width, args.zlim, args.particles, args.grids, args.cell_edges, args.timeoff, args.skip_existing, args.dir, args.center, args.n_processes, args.print_field_list, args.first_only, args.top_left_text, args.use_ISM)


if __name__ == "__main__":

    args = parse_args()
    print(args)
    main(args)

